stages:
  - test

# 🔵 FastAPI (Python)
sonarqube_check_fastapi:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: test
  tags:
    - fastapi-runner  # ✅ FastAPI 전용 Runner에서 실행
  before_script:
    - cd rag_pipeline
    - pip install -r requirements.txt  # FastAPI 의존성 설치
  script:
    - |
      sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.sources=.
  allow_failure: true
  only:
    refs:
      - master
    changes:
      - rag_pipeline/**/*  # FastAPI 코드 변경 시만 실행

# 🟢 Next.js (Node.js 18)
sonarqube_check_nextjs:
  image: 
    name: node:18
    entrypoint: [""]
  stage: test
  tags:
    - nextjs-runner  # ✅ Next.js 전용 Runner에서 실행
  before_script:
    - cd frontend
    - npm install  # Next.js 의존성 설치
  script:
    - |
      npx sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.sources=.
  allow_failure: true
  only:
    refs:
      - master
    changes:
      - frontend/**/*  # Next.js 코드 변경 시만 실행

# 🟢 Spring Boot (Java Gradle)
sonarqube-check:
  stage: test  # ❗누락된 stage 추가
  image: gradle:jre11-slim
  tags:
    - springboot-runner  # ✅ Spring Boot 전용 Runner에서 실행
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - gradle sonar
  allow_failure: true
  only: 
    refs:
      - master
    changes:
      - backend/**/*  # Spring Boot 코드 변경 시만 실행
