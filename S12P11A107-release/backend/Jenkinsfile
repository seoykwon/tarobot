pipeline {
    agent any

    environment {
        // Get the short commit hash
        GIT_COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()  
        DOCKER_IMAGE = "spring-backend:${GIT_COMMIT_HASH}"
        DOCKER_CONTAINER = "spring-be"

        // EC2 details
        EC2_USER = "ubuntu"
        EC2_HOST = "i12a107.p.ssafy.io"//"43.203.192.90"
        SSH_KEY = credentials('ec2-ssh-key') // Add your EC2 SSH key to Jenkins Credentials

        // GitLab details (if needed)
        GITLAB_CREDENTIALS = credentials('gitlab-credentials') // GitLab credentials in Jenkins

        // Fast API URL
        FASTAPI_URL = "http://localhost:8000"
    }

    triggers {
        // Trigger on push or merge events
        gitlab(
            // triggerOnPush: true,
            // triggerOnMergeRequest: true,
            // branchFilterType: "All"
        )
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the GitLab repository
                    git branch: 'release', url: 'https://lab.ssafy.com/s12-webmobile1-sub1/S12P11A107.git', credentialsId: 'gitlab-credentials'
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    echo 'Building the project...'
                    // // add constant env
                    // sh 'export FASTAPI_URL=http://localhost:8000'
                    // Build the backend Spring Boot application
                    sh 'chmod +x /var/lib/jenkins/workspace/spring-backend/backend/gradlew'
                    
                    dir('backend'){
                        sh 'chmod +x /var/lib/jenkins/workspace/spring-backend/backend/settings.gradle'
                        sh 'chmod +x /var/lib/jenkins/workspace/spring-backend/backend/build.gradle'
                        sh '/var/lib/jenkins/workspace/spring-backend/backend/gradlew build'  // Adjust according to your project structure
                    }
                    
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building the Docker image...'
                    // Build the Docker image for the Spring Boot backend
                    sh "docker build -t ${DOCKER_IMAGE} /var/lib/jenkins/workspace/spring-backend/backend/"
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                        sh """
                        sudo docker save -o /home/ubuntu/spring-server.tar ${DOCKER_IMAGE}
                        sudo docker load -i /home/ubuntu/spring-server.tar 
                        sudo docker stop spring-be
                        sudo docker rm spring-be

                        # .env 파일이 존재하면 기존 값을 업데이트, 없으면 새로 생성
                        echo 'FASTAPI_URL=${FASTAPI_URL}' | sudo tee /home/ubuntu/.env > /dev/null

                        sudo docker run --name ${DOCKER_CONTAINER} --env-file /home/ubuntu/.env -d -p 8080:8080 ${DOCKER_IMAGE}
                        """
                        // sh """
                        // cd /home/ubuntu
                        // echo 'GIT_COMMIT_HASH=${GIT_COMMIT_HASH}' | sudo tee .env > /dev/null
                        // sudo docker-compose stop spring-backend
                        // sudo docker-compose rm -f spring-backend
                        // sudo docker-compose up -d spring-backend
                        // """
                    
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }

        failure {
            echo 'Deployment failed.'
        }
    }
}
