user  nginx;
worker_processes auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # -------------------------------------------------------
    # 로그 포맷 설정
    # -------------------------------------------------------
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log main;
    error_log   /var/log/nginx/error.log warn;

    sendfile        on;
    keepalive_timeout  65;

    # -------------------------------------------------------
    # 1) 업스트림 서버 정의 (Docker Compose 서비스명)
    # -------------------------------------------------------
    upstream frontend_upstream {
        server frontend:3000;
    }
    upstream backend_upstream {
        server backend:8080;
    }
    upstream rag_pipeline_upstream {
        server rag_pipeline:8000;
    }

    # -------------------------------------------------------
    # 2) HTTP 80 포트만 운영 (ELB가 HTTPS 처리)
    # -------------------------------------------------------
    server {
        listen 80;
        # AWS ALB에서 tarotvora.com으로 접근 시, 이 서버 블록으로 HTTP가 전달됨
        server_name tarotvora.com www.tarotvora.com ec2-3-38-15-135.ap-northeast-2.compute.amazonaws.com;

        # (선택) CORS 헤더 전역 세팅
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "ChatTag" always;

        # (선택) OPTIONS 프리플라이트 자동 처리
        # if ($request_method = OPTIONS) {
        #     add_header Access-Control-Max-Age 86400;
        #     add_header Content-Length 0;
        #     add_header Content-Type text/plain;
        #     return 204;
        # }

        # -------------------------------------------------------
        # 3-1) Next.js 프론트엔드 (루트 '/')
        # -------------------------------------------------------
        location / {
            proxy_pass http://frontend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # -------------------------------------------------------
        # 3-2) Spring Boot API
        #     - /api/v1/...      -> backend_upstream
        #     - /api/review/...  -> backend_upstream
        #     - /api/... rewrite -> /api/v1/$1
        #     - /community/...   -> backend_upstream
        # -------------------------------------------------------
        location /api/v1/ {
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/review/ {
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/ {
            rewrite ^/api/(.*) /api/v1/$1 break;
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /community/ {
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # -------------------------------------------------------
        # 3-3) RAG 파이프라인 (FastAPI)
        #     - /rag/... -> rewrite -> /
        #     - /socket.io/ -> rag_pipeline_upstream
        # -------------------------------------------------------
        location /rag/ {
            rewrite ^/rag/(.*) /$1 break;
            proxy_pass http://rag_pipeline_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /socket.io/ {
            proxy_pass http://rag_pipeline_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # -------------------------------------------------------
        # 3-4) OAuth2 (Spring Security)
        #     - /oauth2/...
        #     - /login/...
        # -------------------------------------------------------
        location /oauth2/ {
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /login/ {
            proxy_pass http://backend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # -------------------------------------------------------
        # 3-5) googleLogin.html 등 스프링부트 static 리소스
        # -------------------------------------------------------
        location /googleLogin.html {
            proxy_pass http://backend_upstream/googleLogin.html;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
