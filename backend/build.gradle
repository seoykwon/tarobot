buildscript {
    ext {
        springBootVer = '3.2.12' // Spring Boot 버전 업그레이드
        querydslVer = '5.0.0'  // QueryDSL 최신 버전으로 업그레이드
        querydslPluginVer = '1.0.10' // QueryDSL 플러그인 버전 (필요 시 유지)
        springDependencyMgmtVer = '1.1.4' // Spring Dependency Management 최신 버전
        // springLoadedVer = '1.2.8' // Spring Loaded (변경 없음)
        // nodePluginVer = '1.3.1' // Node 플러그인 (변경 없음)
        nodePluginVer = '3.1.1' // Node 플러그인 최신 버전
        lombokVer = '1.18.28'  // Lombok 최신 버전
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}"
        // classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
    id "org.sonarqube" version "3.5.0.2730"
}
    sonarqube {
        properties {
            property "sonar.projectKey", "S12P11A107"
            property "sonar.host.url", "https://sonarqube.ssafy.com"
            property "sonar.login", "sqp_0d6a0c9de84c811fb4f7e1d70f8a3899a4a7672c"
            property "sonar.sources", "src"
        }
    }


//tasks.withType(JavaCompile).configureEach {
//    options.annotationProcessorGeneratedSourcesDirectory = file("build/generated")
//}


// sonar {
//     properties {
//         property "sonar.projectKey", "S12P11A107"
//         property "sonar.qualitygate.wait", true
//     }
// }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'eclipse'
    apply plugin: 'com.github.node-gradle.node'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
//    maven { url "https://repo.spring.io/libs-release" }
//    maven { url "https://repo.maven.apache.org/maven2" }
//    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
    }

    group 'com.ssafy'
    version '1.0-SNAPSHOT'
    sourceCompatibility = '17'

// node {
//     download = true
//     version = '14.17.0'
//     // Set the work directory where node_modules should be located
//     nodeModulesDir = file("${project.projectDir}/../frontend")
// }

    configurations {
        providedRuntime
    }

/* task npmInstall(type: NpmTask, overwrite: true) {
    args = ['install']
} */

// task webpack(type: NpmTask, dependsOn: 'npmInstall') {
//     args = ['run','build']
// }
//
// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
// processResources.dependsOn 'webpack'

// set build time and inject value to application.properties
    def buildTime() {
        def date = new Date()
        def formattedDate = date.format('yyyyMMdd_HHmm')
        return formattedDate
    }

    project.ext.set("build.date", buildTime())

    import org.apache.tools.ant.filters.ReplaceTokens

    processResources {
        from("src/main/resources") {
            include "**/*.properties"
            include "**/*.yml"
            include "**/*.yaml"

            // 프로젝트 속성을 문자열로 변환하여 ReplaceTokens에 전달
            filter(ReplaceTokens, tokens: project.properties.findAll { key, value ->
                value != null && value instanceof String
            }.collectEntries { key, value ->
                [(key): String.valueOf(value)]
            })
        }
    }
//processResources {
//    with copySpec {
//        from "src/main/resources"
//        include "**/application*.yml"
//        include "**/application*.yaml"
//        include "**/application*.properties"
//        project.properties.findAll().each {
//            prop ->
//                if (prop.value != null) {
//                    filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
//                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
//                    filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
//                }
//        }
//    }
// }


    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter-websocket")
        implementation("org.springframework.boot:spring-boot-starter-security")
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("org.springframework.boot:spring-boot-starter-validation")

        runtimeOnly("com.mysql:mysql-connector-j") // MySQL 드라이버 최신 버전
        runtimeOnly("org.springframework.boot:spring-boot-properties-migrator") // 설정 속성의 변경 사항을 확인, 사용 중단된 속성을 감지
        developmentOnly("org.springframework.boot:spring-boot-devtools")

        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        implementation('commons-io:commons-io:2.11.0') // commons-io 최신 버전
        implementation("org.apache.commons:commons-lang3:3.12.0") // commons-lang3 최신 버전

        implementation("com.querydsl:querydsl-jpa:${querydslVer}:jakarta")
        annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jakarta")

        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
        annotationProcessor("jakarta.persistence:jakarta.persistence-api:3.1.0")
        annotationProcessor "jakarta.annotation:jakarta.annotation-api" // Jakarta 어노테이션 추가

        implementation("org.projectlombok:lombok:${lombokVer}")
        annotationProcessor("org.projectlombok:lombok:${lombokVer}")

        testImplementation('org.springframework.boot:spring-boot-starter-test')

        implementation("com.google.guava:guava:31.1-jre") // Guava 추가

        implementation "com.auth0:java-jwt:3.19.2"


        // Swagger (Springfox)
        implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0")

//  implementation("io.springfox:springfox-swagger2:3.0.0")
//  implementation("io.springfox:springfox-swagger-ui:3.0.0")
//  implementation("io.springfox:springfox-data-rest:3.0.0")
//  implementation("io.springfox:springfox-bean-validators:3.0.0")
        // oauth2
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

        //webflux
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
    }

//sourceSets {
//    main {
//        java {
//            srcDirs = ['src/main/java', 'src/main/generated']
//        }
//    }
//}
//
//
//tasks.withType(JavaCompile).configureEach {
//    options.annotationProcessorGeneratedSourcesDirectory = file("src/main/generated")
//    options.compilerArgs += [
//            "-Aquerydsl.generatedAnnotationClass=jakarta.annotation.processing.Generated"
//    ]
//}

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ["-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated"]
    }

// 중복 처리 전략
    tasks.processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

// JUnit5 테스트 플랫폼 명시
    tasks.withType(Test).configureEach {
        useJUnitPlatform()

    }
