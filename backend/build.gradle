buildscript {
    ext {
        springBootVer = '3.2.12' // Spring Boot
        querydslVer = '5.0.0'  // QueryDSL
        querydslPluginVer = '1.0.10' // QueryDSL 플러그인
        springDependencyMgmtVer = '1.1.4' // Spring Dependency Management
        nodePluginVer = '3.1.1' // Node 플러그인
        lombokVer = '1.18.28'  // Lombok
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}"
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
    id "org.sonarqube" version "3.5.0.2730"
}

// SonarQube 설정
sonarqube {
    properties {
        property "sonar.projectKey", "S12P11A107"
        property "sonar.host.url", "https://sonarqube.ssafy.com"
        property "sonar.login", "sqp_0d6a0c9de84c811fb4f7e1d70f8a3899a4a7672c"
        property "sonar.sources", "src"
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'com.github.node-gradle.node'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

group 'com.ssafy'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    providedRuntime
}

// 빌드 타임 설정
def buildTime() {
    def date = new Date()
    return date.format('yyyyMMdd_HHmm')
}

project.ext.set("build.date", buildTime())

import org.apache.tools.ant.filters.ReplaceTokens

// 리소스 파일 내 프로젝트 속성 값 치환
processResources {
    from("src/main/resources") {
        include "**/*.properties"
        include "**/*.yml"
        include "**/*.yaml"
        filter(ReplaceTokens, tokens: project.properties.findAll { key, value ->
            value != null && value instanceof String
        }.collectEntries { key, value ->
            [(key): String.valueOf(value)]
        })
    }
}

// 의존성 설정
dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    runtimeOnly("com.mysql:mysql-connector-j") // MySQL 드라이버
    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator") // 설정 속성 변경 감지
    developmentOnly("org.springframework.boot:spring-boot-devtools")

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation('commons-io:commons-io:2.11.0') // commons-io
    implementation("org.apache.commons:commons-lang3:3.12.0") // commons-lang3

    implementation("com.querydsl:querydsl-jpa:${querydslVer}:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jakarta")

    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor("jakarta.persistence:jakarta.persistence-api:3.1.0")
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // Jakarta 어노테이션

    implementation("org.projectlombok:lombok:${lombokVer}")
    annotationProcessor("org.projectlombok:lombok:${lombokVer}")

    testImplementation('org.springframework.boot:spring-boot-starter-test')

    implementation("com.google.guava:guava:31.1-jre") // Guava
    implementation "com.auth0:java-jwt:3.19.2" // JWT

    // Swagger 설정
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0")

    // OAuth2 설정
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // WebFlux 설정
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

// QueryDSL 설정
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated"]
}

// 중복 처리 전략
tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// JUnit5 테스트 플랫폼 명시
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
