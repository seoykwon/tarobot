package com.ssafy.config;

import com.ssafy.api.service.UserService;
import com.ssafy.common.auth.JwtAuthenticationFilter;
import com.ssafy.common.auth.SsafyUserDetailService;

import com.ssafy.common.util.JwtTokenUtil;
import com.ssafy.config.oauth.OAuth2FailureHandler;
import com.ssafy.config.oauth.OAuth2SuccessHandler;
import com.ssafy.config.oauth.OAuth2UserCustomService;
import lombok.RequiredArgsConstructor;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.context.SecurityContextHolderStrategy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

/**
 * Ïù∏Ï¶ù(authentication) ÏôÄ Ïù∏Í∞Ä(authorization) Ï≤òÎ¶¨Î•º ÏúÑÌïú Ïä§ÌîÑÎßÅ ÏãúÌÅêÎ¶¨Ìã∞ ÏÑ§Ï†ï Ï†ïÏùò.
 */
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor // ÏÉùÏÑ±Ïûê Ï£ºÏûÖÏùÑ ÏúÑÌïú Lombok Ïñ¥ÎÖ∏ÌÖåÏù¥ÏÖò
@EnableMethodSecurity(prePostEnabled = true) // @EnableGlobalMethodSecurity ÎåÄÏ≤¥
public class SecurityConfig {

    private final SsafyUserDetailService ssafyUserDetailService; // ÏÉùÏÑ±Ïûê Ï£ºÏûÖ
    private final UserService userService;                      // ÏÉùÏÑ±Ïûê Ï£ºÏûÖ
    private final PasswordEncoder passwordEncoder;              // PasswordEncoder Ï£ºÏûÖ
    private final OAuth2UserCustomService oAuth2UserCustomService;
    private final OAuth2SuccessHandler oAuth2SuccessHandler;
    private final OAuth2FailureHandler oAuth2FailureHandler;

    // DAO Í∏∞Î∞òÏúºÎ°ú Authentication```````````````````` ProviderÎ•º ÏÉùÏÑ±
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder); // PasswordEncoder Ï£ºÏûÖ ÏÇ¨Ïö©
        daoAuthenticationProvider.setUserDetailsService(this.ssafyUserDetailService);
        return daoAuthenticationProvider;
    }

    // AuthenticationManagerÎ•º ÎπàÏúºÎ°ú Îì±Î°ù (ÌïÑÏöî Ïãú Ï£ºÏûÖ Í∞ÄÎä•)
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    // SecurityFilterChainÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ HttpSecurity ÏÑ§Ï†ï Ï†ïÏùò
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable()) // CSRF ÎπÑÌôúÏÑ±Ìôî
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // ÏÑ∏ÏÖò ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå (JWT Í∏∞Î∞ò Ïù∏Ï¶ù)
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/v1/users/me", "/api/v1/user-profiles/me").authenticated() // Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú URL ÏÑ§Ï†ï
                        .anyRequest().permitAll()                           // ÎÇòÎ®∏ÏßÄ ÏöîÏ≤≠ÏùÄ Î™®Îëê ÌóàÏö©
                )
                .authenticationProvider(authenticationProvider()) // Authentication Provider Îì±Î°ù
                .addFilterBefore(new JwtAuthenticationFilter(
                        authenticationManager(http.getSharedObject(AuthenticationConfiguration.class)),
                        userService), UsernamePasswordAuthenticationFilter.class) // üëà JWT ÌïÑÌÑ∞Î•º UsernamePasswordAuthenticationFilter Ïù¥Ï†ÑÏóê Ïã§Ìñâ
                // .cors(cors -> cors.disable()) // CORS ÏÑ§Ï†ï (ÌïÑÏöî Ïãú ÌôúÏÑ±Ìôî)
                .cors(cors -> cors.configurationSource(corsConfigurationSource())) // ÌïÑÏöîÏóê Îî∞Îùº ÌôúÏÑ±Ìôî Í∞ÄÎä•
                .oauth2Login(oauth2 -> oauth2
                    .userInfoEndpoint(userInfo -> userInfo.userService(oAuth2UserCustomService))
                    .successHandler(oAuth2SuccessHandler)
                    .failureHandler(oAuth2FailureHandler)
                );

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        // configuration.addAllowedOrigin("*");
        configuration.addAllowedOriginPattern("*");
        configuration.addAllowedMethod("*");
        configuration.addAllowedHeader("*");
        configuration.addExposedHeader(JwtTokenUtil.HEADER_STRING);
        configuration.setAllowCredentials(true);
        configuration.setMaxAge(3600L);
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    // SecurityContextHolderÎ•º ÌÜµÌï¥ Ïù∏Ï¶ù Ï†ïÎ≥¥ Ï†ÄÏû•
    @Bean
    public SecurityContextHolderStrategy securityContextHolderStrategy() {
        return SecurityContextHolder.getContextHolderStrategy();
    }
}
