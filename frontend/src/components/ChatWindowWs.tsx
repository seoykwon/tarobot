// components/ChatWindowWs.tsx
"use client";

import { useState, useRef, useEffect, useCallback } from "react";
import { API_URLS } from "@/config/api";
import ChatInput from "@/components/ChatInput";
import Image from "next/image";
import CardSelector from "@/components/CardSelector";
import { tarotCards } from "@/utils/tarotCards";
import { io, Socket } from "socket.io-client";
import { useSession } from "@/context/SessionContext";
import { getTarotMaster } from "@/libs/api";

interface ChatWindowProps {
  sessionIdParam?: string;
}

interface MessageForm {
  message: string;
  role: string;
  content?: React.ReactNode;
}

interface TarotMaster {
  id: number;
  name: string;
  description: string;
  concept: string;
  profileImage: string;
  mbti: string;
}

export default function ChatWindowWs({ sessionIdParam }: ChatWindowProps) {
  const botId = localStorage.getItem("botId");
  const userId = localStorage.getItem("userId");
  const sessionId = sessionIdParam || "nosession";
  const [tarotMaster, setTarotMaster] = useState<TarotMaster>();
  const [chatType, setChatType] = useState("none");
  const [showTarotButton, setShowTarotButton] = useState(false);
  const [showCardSelector, setShowCardSelector] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [messages, setMessages] = useState<{ text: string; isUser: string; content?: React.ReactNode }[]>([]);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const socketRef = useRef<Socket | null>(null);
  const [nickname, setNickname] = useState("");
  
  const [isRoomJoined, setIsRoomJoined] = useState(false);
  const pendingMessageRef = useRef<string | null>(null); // ‚úÖ useRefÎ°ú Î≥ÄÍ≤Ω

  const { triggerSessionUpdate } = useSession();

  // ÌîÑÎ°úÌïÑÏóêÏÑú ÎãâÎÑ§ÏûÑ Î∂àÎü¨Ïò§Í∏∞ Ìï®Ïàò
  const fetchProfileData = useCallback(async (): Promise<void> => {
    // ÎÇ¥ ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞
    try {
      const res = await fetch(API_URLS.USER.ME, {
        method: "GET",
        credentials: "include",
      });

      if (res.ok) {
        const data = await res.json();
        setNickname(data.nickname || "");
      } else {
        console.error("ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    } catch (error) {
      console.error("ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
    } finally {
    }
  }, []);

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    fetchProfileData();
  }, [fetchProfileData]);

  // botIdÎ°ú Î∂ÄÌÑ∞ Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ (ÌîÑÏÇ¨ Îì±)
  useEffect(() => {
    if (!botId) return;
      const fetchTarotMasters = async () => {
        try {
          const master = await getTarotMaster(botId);
          setTarotMaster(master);
        } catch (error) {
          console.error("ÌÉÄÎ°ú ÎßàÏä§ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
        }
      };
  
      fetchTarotMasters();
    }, [botId]);
  
  // ÏÇ¨Ïö©ÏûêÍ∞Ä Î©îÏãúÏßÄÎ•º Ï†ÑÏÜ°ÌïòÎ©¥ Ïã§ÌñâÎêòÎäî Î°úÏßÅ (Ïä§Ìä∏Î¶¨Î∞ç ÏùëÎãµÏùÑ Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ)
  const handleSendMessage = useCallback(async (message: string) => {
    // ÏÑ∏ÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    const updateChatSession = async () => {
      try {
        const response = await fetch(API_URLS.CHAT.UPDATE(sessionId), {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
          // PUT ÏöîÏ≤≠Ïù¥ bodyÎ•º ÌïÑÏöîÎ°ú Ìï† Í≤ΩÏö∞ body: JSON.stringify({ ... }) Ï∂îÍ∞Ä
        });
  
        if (!response.ok) {
          throw new Error('Ï±ÑÌåÖ ÏÑ∏ÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®');
        }
  
      } catch (err) {
        console.error('ÏóÖÎç∞Ïù¥Ìä∏ ÏóêÎü¨:', err);
      }
    };

    // ‚úÖ Î∞© ÏûÖÏû•Ïù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÎã§Î©¥ Î©îÏãúÏßÄÎ•º ÎåÄÍ∏∞Ïó¥Ïóê Ï∂îÍ∞Ä
    if (!isRoomJoined) {
      console.warn("‚ö†Ô∏è Î∞© ÏûÖÏû•Ïù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïÑ Î©îÏãúÏßÄÎ•º ÎåÄÍ∏∞Ïó¥Ïóê Ï∂îÍ∞ÄÌï©ÎãàÎã§.");
      pendingMessageRef.current = message; // ‚úÖ useRefÏóê Ï†ÄÏû•
      return;
    }

    if (!socketRef.current) return;

    updateChatSession().then(() => {
      triggerSessionUpdate();
    }); // ÏÑ∏ÏÖò ÏóÖÎç∞Ïù¥Ìä∏
  
    // ‚úÖ Socket.IOÎ•º ÌÜµÌï¥ Î©îÏãúÏßÄ Ï†ÑÏÜ°
    socketRef.current.emit("chat_message", {
      room_id: sessionId,
      user_id: userId,
      bot_id: botId,
      user_input: message,
      type: showTarotButton ? "none" : chatType,
    });
  
    setChatType("none"); // Î≥¥ÎÇ¥Í≥† ÎÇú Îí§ Ï¥àÍ∏∞Ìôî

  }, [sessionId, chatType, showTarotButton, botId, userId, isRoomJoined, triggerSessionUpdate]);

  // WebSocket Ïó∞Í≤∞
  useEffect(() => {
    // Î™®Îì† Í∞íÏù¥ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏúºÎ©¥ Ïó∞Í≤∞ÌïòÏßÄ ÏïäÏùå
    if (!sessionId || !userId || !nickname) return;
    // Ïù¥ÎØ∏ Ïó∞Í≤∞Îêú Í≤ΩÏö∞ Ïû¨Ïó∞Í≤∞ Î∞©ÏßÄ
    if (socketRef.current) return;
  
    // ‚úÖ Socket.IO Ïó∞Í≤∞
    const socket = io(`${API_URLS.SOCKET.BASE}`, {
      path: "/socket.io",
      transports: ["websocket", "polling"],
    });
  
    socketRef.current = socket;
  
    // ‚úÖ ÏÑ∏ÏÖò(Room) Ï∞∏Í∞Ä
    socket.emit("join_room", { room_id: sessionId, user_id: userId, nickname });
  
    socket.on("room_joined", (data) => {
      console.log(`Room joined: ${data.room_id}`);
      setIsRoomJoined(true); // Î∞© ÏûÖÏû• ÏôÑÎ£å ÏÉÅÌÉú Î≥ÄÍ≤Ω
    });
  
    // ‚úÖ Î©îÏãúÏßÄ ÏàòÏã† Ï≤òÎ¶¨
    socket.on("chat_message", (data) => {
      console.log(`üì© ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ ÏàòÏã†: ${data}`);
      setMessages((prev) => [...prev, { text: data.message, isUser: data.role }]);
      // setMessages((prev) => [...prev, { text: "ÏûÖÎ†• Ï§ë...", isUser: "assistant" }]);
    });
  
    // socket.on("chatbot_message", (data) => {
    //   console.log(`ü§ñ Ï±óÎ¥á Î©îÏãúÏßÄ ÏàòÏã†: ${data}`);
    //   setChatType(data.chat_tag);
    //   setMessages((prev) => {
    //     const updatedMessages = [...prev];
    //     const lastBotIndex = updatedMessages.findLastIndex(
    //       (msg) => msg.isUser === "assistant" && msg.text === "ÏûÖÎ†• Ï§ë..."
    //     );
    //     if (lastBotIndex !== -1) {
    //       updatedMessages.splice(lastBotIndex, 1);
    //     }
    //     updatedMessages.push({ text: data.message, isUser: "assistant" });
    //     return updatedMessages;
    //   });
    // });
    socket.on("chatbot_message", (data) => {
      console.log(`ü§ñ Ï±óÎ¥á Î©îÏãúÏßÄ ÏàòÏã†: ${data}`);
      setChatType(data.chat_tag);
      setMessages((prev) => {
        const updatedMessages = [...prev];
        // ÎßàÏßÄÎßâ Î©îÏãúÏßÄÍ∞Ä assistantÏùò Î©îÏãúÏßÄÎùºÎ©¥, Í∑∏ Î©îÏãúÏßÄÏóê ÏÉàÎ°úÏö¥ Ï≤≠ÌÅ¨Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
        if (
          updatedMessages.length > 0 &&
          updatedMessages[updatedMessages.length - 1].isUser === "assistant"
        ) {
          updatedMessages[updatedMessages.length - 1].text += data.message;
        } else {
          // Ï≤òÏùå Î∞õÏùÄ Î©îÏãúÏßÄÎùºÎ©¥ ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄ Í∞ùÏ≤¥Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
          updatedMessages.push({ text: data.message, isUser: "assistant" });
        }
        return updatedMessages;
      });
    });
  
    return () => {
      console.log("ÏÜåÏºì Ïó∞Í≤∞ Ìï¥Ï†ú");
      socket.disconnect();
      socketRef.current = null;
    };
  }, [sessionId, userId, nickname]);

  // pendingMessageÎ•º Í∞êÏßÄÌï¥ Ï†ÑÎã¨
  useEffect(() => {
    if (isRoomJoined && pendingMessageRef.current) {
      console.log("üîÑ `isRoomJoined` Î≥ÄÍ≤Ω Í∞êÏßÄ, ÎåÄÍ∏∞ Ï§ëÏù¥Îçò Î©îÏãúÏßÄ Ï†ÑÏÜ°:", pendingMessageRef.current);
      handleSendMessage(pendingMessageRef.current);
      pendingMessageRef.current = null;
    }
  }, [isRoomJoined, handleSendMessage]);

// ÌäπÏ†ï ÌÅ¨Í∏∞ Ïù¥ÌïòÎ°ú ÎÇ¥Î†§Í∞à Í≤ΩÏö∞Ïóê ÎåÄÌïú ÏÉÅÌÉúÎ•º Î∞òÏòÅÌïòÎäî Ìï®Ïàò
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };

    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  // ÏÑ∏ÏÖò ÏßÑÏûÖ Ïãú Ïù¥Ï†Ñ ÎåÄÌôî Í∏∞Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
  useEffect(() => {
    const storedMessage = localStorage.getItem("firstMessage");
    if (storedMessage) return;
    const loadSessionMessages = async () => {
      try {
        // ==========================================
        // Ïù¥ ÏúÑÏπòÏóêÏÑú Î≥∏Ïù∏Ïùò ÏÑ∏ÏÖòÏù¥ ÎßûÎäî ÏßÄ ÌôïÏù∏ÌïòÎäî isMySession Î°úÏßÅÏùÑ ÏàòÌñâÌï¥ÏïºÌï®!!!

        // ==========================================
        console.log("ÏßÄÍ∏à Î©îÏãúÏßÄ Î°úÎìú");
        const response = await fetch(API_URLS.CHAT.LOAD_SESSION, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ sessionId }),
          credentials: "include",
        });

        if (!response.ok) throw new Error("Ïù¥Ï†Ñ ÎåÄÌôî Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®");

        const data = await response.json();

        // ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù¥Ï†Ñ ÎåÄÌôî Í∏∞Î°ùÏùÑ Î©îÏãúÏßÄ ÏÉÅÌÉúÏóê ÏÑ§Ï†ï
        setMessages(data.map((msg: MessageForm) => ({
          text: msg.message,
          isUser: msg.role,
          content: msg.content ? (
            <Image
              src={`/basic/${msg.content}.svg`}
              alt={`Selected tarot card ${msg.message}`}
              width={96}
              height={134}
              className="mt-2 mx-auto"
            />
          ) : undefined,
        })));
      } catch (error) {
        console.error("Ïù¥Ï†Ñ ÎåÄÌôî Í∏∞Î°ù Î∂àÎü¨Ïò§Í∏∞ ÏóêÎü¨:", error);
      }
    };

    if (sessionId) {
      loadSessionMessages(); // ÏÑ∏ÏÖò ÏßÑÏûÖ Ïãú Ïù¥Ï†Ñ ÎåÄÌôî Í∏∞Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ìï®Ïàò Ìò∏Ï∂ú
      return;
    }
  }, [botId, sessionId]);

  // chatType(=chatTag) Î≥ÄÍ≤ΩÏóê Îî∞Îùº Í∏∞Îä• Ï≤òÎ¶¨Î¶¨Í≤∞Ï†ï
  useEffect(() => {
    setShowTarotButton(chatType === "tarot");

    if (chatType === "tarot result") {
      const closeSession = async () => {
        try {
          const response = await fetch(API_URLS.CHAT.CLOSE, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              sessionId: sessionId,
              userId: userId,
            }),
            credentials: "include",
          });
          if (!response.ok) throw new Error("ÏÑ∏ÏÖò Ï¢ÖÎ£å Ïã§Ìå®");
        } catch (error) {
          console.error("ÏÑ∏ÏÖò Ï¢ÖÎ£å ÏóêÎü¨:", error);
        }
      };
  
      closeSession();
    }
  }, [chatType, sessionId, userId]);

  // ÌÉÄÎ°ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïπ¥Îìú ÏÑ†ÌÉùÏ∞Ω Ìò∏Ï∂ú
  const handleShowCardSelector = () => {
    setShowTarotButton(false);
    setShowCardSelector(true);
  };

  // Ïπ¥Îìú ÏÑ†ÌÉù ÌõÑ Ï≤òÎ¶¨ (ÏÑ†ÌÉùÌïú Ïπ¥Îìú Ïù¥Î¶ÑÏùÑ Ï±ÑÌåÖÏóê Î∞òÏòÅ)
  const handleCardSelect = (cardId: string) => {
    setShowCardSelector(false);
    const selectedCard = tarotCards[cardId];
    // Î¥á Î©îÏãúÏßÄÎ°ú Ïπ¥Îìú ÏÑ†ÌÉù Í≤∞Í≥ºÎ•º Î≥¥Ïó¨Ï£ºÍ≥†, ÏÑ†ÌÉùÌïú Ïπ¥Îìú Ïù¥Î¶ÑÏùÑ Ï†ÑÏÜ°
    // Ïπ¥Îìú ÏÑ†ÌÉù Í≤∞Í≥º Î©îÏãúÏßÄ: ÌÖçÏä§Ìä∏ÏôÄ Ìï®Íªò Ïπ¥Îìú Ïù¥ÎØ∏ÏßÄ ÌëúÏãú
    setMessages((prev) => [
      ...prev,
      { 
        text: `"${selectedCard}" Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌñàÏñ¥!`, 
        isUser: "assistant",
        content: (
          <Image
            src={`/basic/${cardId}.svg`}
            alt={`Selected tarot card ${selectedCard}`}
            width={96}
            height={134}
            className="mt-2 mx-auto"
          />
        ),
      },
    ]);
    // ÏÑ†ÌÉùÌïú Ïπ¥Îìú Ïù¥Î¶ÑÏùÑ ÏÑúÎ≤ÑÏóê Ï†ÑÏÜ°
    handleSendMessage(selectedCard);
  };

  // ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïãú firstMessageÍ∞Ä ÏûàÏúºÎ©¥ Î∞îÎ°ú ÏÑ∏ÌåÖÌïòÍ≥† ÏùëÎãµ ÏÉùÏÑ±
  useEffect(() => {
    const storedMessage = localStorage.getItem("firstMessage");
    if (storedMessage) {
      // ‚úÖ 200ms Îí§Ïóê Ï≤´ Î©îÏãúÏßÄ Ï†ÑÏÜ° (WebSocket Ïó∞Í≤∞ Î≥¥Ïû•)
      setTimeout(() => {
        handleSendMessage(storedMessage).then(() => {
          console.log("ÏßÄÍ∏à Ï≤´ Î©îÏãúÏßÄ Ï†úÏñ¥");
          localStorage.removeItem("firstMessage"); // ‚úÖ ÏÇ¨Ïö© ÌõÑ ÏÇ≠Ï†ú
        });
      }, 200); // üöÄ WebSocket ÏïàÏ†ïÏÑ±ÏùÑ ÏúÑÌï¥ 200ms ÎåÄÍ∏∞
    } else {
      // console.log("Í∏∞Ï°¥ ÏÑ∏ÏÖò ÏûÖÏû•");
    }
  }, [handleSendMessage]);

  // ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä Ï∂îÍ∞ÄÎê† ÎïåÎßàÎã§ Ïä§ÌÅ¨Î°§ÏùÑ ÏûêÎèôÏúºÎ°ú Îß® ÏïÑÎûòÎ°ú Ïù¥Îèô
  useEffect(() => {
    chatContainerRef.current?.scrollTo({
      top: chatContainerRef.current.scrollHeight,
      behavior: "smooth",
    });
  }, [messages]);

  return (
        // Î™®Î∞îÏùºÏùºÎïåÏôÄ ÏïÑÎãêÎïå Î∞∞Í≤Ω Î∂ÑÍ∏∞
        <div className={isMobile ? "relative h-screen bg-purple-50" : "flex flex-col h-screen bg-purple-50 rounded-lg"}>
        {/* Î™®Î∞îÏùºÏùº Îïå Ïù¥ÎØ∏ÏßÄ Î∂ÄÎ∂Ñ ÏÇ≠Ï†ú */}
        <div
        className={
        isMobile
        ? "relative z-10 flex flex-col h-screen bg-purple-50"
        : "flex flex-col h-screen"
        }
        style={isMobile ? { height: "calc(100vh - 3.5rem)" } : {}}
        >
        {/* Ï±ÑÌåÖ Î°úÍ∑∏ ÏòÅÏó≠ (ÎèÖÎ¶Ω Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑà) */}
        <div
          ref={chatContainerRef}
          className="flex-1 px-6 py-4 space-y-4 overflow-auto mb-4 sm:mb-14"
        >
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`flex ${
              msg.isUser === "assistant" ? "justify-start" : "justify-end"
            } w-full`}
          >
            {msg.isUser === "assistant" ? (
              <div className="flex items-start space-x-3">
                {/* Î¥á ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ */}
                {/* ÌòÑÏû¨ botidÏóê ÎåÄÌï¥ fetch Ìï¥ÏÑú ÏóîÌã∞Ìã∞ Í∞ÄÏ†∏Ïò® Îí§ profileImage ÏÜçÏÑ±Í∞íÏùÑ srcÎ°ú ÌïòÎäîÍ≤å Ï¢ãÏùå */}
                <Image
                  src={tarotMaster?.profileImage || `/bots/${botId}_profile.png`}
                  alt="Bot Profile"
                  width={128}
                  height={128}
                  className="w-16 h-16 rounded-full"
                />
                {/* Î¥á Î©îÏãúÏßÄ ÎßêÌíçÏÑ† */}
                <div className="px-4 py-2 rounded-lg max-w-[90%] text-gray-800 leading-relaxed">
                  {msg.text}
                  {msg.content && <div className="mt-2">{msg.content}</div>}
                  {index === messages.length - 1 && chatType === "tarot" && (
                    <div className="mt-2">
                      <button
                        onClick={handleShowCardSelector}
                        className="px-4 py-2 bg-yellow-500 text-white rounded"
                      >
                        ÌÉÄÎ°ú Ï†ê Î≥¥Í∏∞ üîÆ
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              /* ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ */
              <div
                className={`px-4 py-2 rounded-lg max-w-[60%] ${
                  msg.isUser === userId ? "bg-blue-500 text-white" : "bg-gray-300 text-black"
                }`}
              >
                {msg.text}
              </div>
            )}
          </div>
        ))}


        </div>
  
        {/* ============ Ï∂îÍ∞ÄÎêú ÏöîÏÜå ============ */}
        {/* Ïπ¥Îìú ÏÑ†ÌÉù UI (CardSelector Ïª¥Ìè¨ÎÑåÌä∏) */}
        {showCardSelector && (
          <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
            <CardSelector
              onCardSelect={handleCardSelect}
              onClose={() => setShowCardSelector(false)}
            />
          </div>
        )}
        {/* ============ Ï∂îÍ∞ÄÎêú ÏöîÏÜå ============ */}
  
        {/* ÌïòÎã® ÏûÖÎ†•Ï∞Ω */}
        <ChatInput onSend={handleSendMessage} sessionId={sessionId}/>
      </div>
    </div>
  );
}