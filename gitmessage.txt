# <type>(<scope>): <subject>
# 아래에 타입, 스코프(선택사항), 제목을 입력하세요.
# 예: feat(UserService): 로그인 기능 구현

# 아래에 본문을 입력하세요.

# 아래에 푸터를 입력하세요. 주요 변경사항, 관련 이슈 등을 명시합니다

# 커밋 메시지 작성 가이드:
# 1. Subject line (제목 줄)
#    - <type>: 커밋의 종류 (feat, fix, docs, style, refactor, test, chore 등)
#    - (<scope>): 변경된 부분 (함수, 클래스 이름 등, 생략 가능)
#    - <subject>: 변경 사항에 대한 간단한 설명 (70자 이내)
#    - 첫 글자는 소문자로, 마침표 없이 작성
#    - 명령형 현재 시제로 작성 (changed -> change)
#
# 2. Message body (메시지 내용)
#    - 변경한 이유와 변경 전후 차이점 설명
#    - 각 줄은 70자를 넘기지 않도록 줄바꿈
#    - "무엇을, 왜" 변경했는지 중심으로 작성
#
# 3. Message footer (메시지 하단)
#    - 주요 변경사항 명시
#    - 필요시 전후 비교 포함
#    - 마이그레이션 필요시 지시사항 포함
#    - 해결된 이슈: Closes #123, #456
#
# type 목록:
# feat     : 새로운 기능 추가
# fix      : 버그 수정
# docs     : 문서 수정
# style    : 코드 스타일 수정 (포맷, 세미콜론 등)
# refactor : 코드 리팩토링 (기능 변경 없음)
# test     : 테스트 추가 또는 리팩토링
# chore    : 빌드 태스크 변경, 패키지 매니저 설정
# design   : UI 디자인 변경
# comment  : 주석 추가 또는 변경
# rename   : 파일 또는 폴더 이름 변경
# remove   : 사용하지 않는 파일 또는 폴더 삭제

# 예시:
# feat(auth): 사용자 로그인 기능 구현
#
# - 사용자 인증 로직 추가
# - JWT 토큰 생성 및 검증 기능 구현
# - 로그인 실패 시 예외 처리 로직 추가
#
# 로그인 기능은 보안상 중요한 부분이므로, 추후 보안 감사를 진행할 예정입니다.
#
# Resolves: #123